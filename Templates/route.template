const express = require('express')
const {{MODELNAME}}Router = express.Router()
const { {{MODELNAME}}Model } = require("../models")
const config = require('config')
const MODEL_NAME = '{{MODELNAME}}'

// Post: Create
{{MODELNAME}}Router.post('/', async (req, res) => {
  let {{MODELNAME}} = new {{MODELNAME}}Model(req.body)
  try {
    let { _id } = await {{MODELNAME}}.save()
    res.set('Location', `${config.get('Resources').LocationBase}/${MODEL_NAME.toLowerCase()}/${_id}`)
    return res.sendStatus(201) //201 Created: The request has been fulfilled, resulting in the creation of a new resource.
  } catch (error) {
    console.error(`create ${MODEL_NAME} failed with error: `, error.message)
    return res.sendStatus(500)
  }
})

// Get: query list
{{MODELNAME}}Router.get('/', async (req, res) => {
  try {
    let {{MODELNAME}}List = await {{MODELNAME}}Model.find().exec()
    return res.send({{MODELNAME}}List)
  } catch (error) {
    console.error(`get ${MODEL_NAME} list failed with error: `, error.message)
    return res.sendStatus(500)
  }
})

// Get: query one resource
{{MODELNAME}}Router.get('/:_id', async (req, res) => {
  let _id = req.params
  try {
    let {{MODELNAME}} = await {{MODELNAME}}Model.findById(_id).exec()
    return res.send({{MODELNAME}})
  } catch (error) {
    console.error(`get ${MODEL_NAME} By Id: ${id} failed with error: `, error.message)
    return res.sendStatus(500)
  }
})

// Put: update the WHOLE document
{{MODELNAME}}Router.put('/:_id', async (req, res) => {
  let { _id } = req.params
  try {
    await {{MODELNAME}}Model.findByIdAndUpdate(_id,req.body,{overwrite:true}).exec()
    return res.sendStatus(204) //204 No Content: The server successfully processed the request and is not returning any content.
  } catch (error) {
    console.error(`replace ${MODEL_NAME}: ${_id} failed with error: `, error.message)
    return res.sendStatus(500)
  }
})

// Patch: update part of the document
{{MODELNAME}}Router.patch('/:_id', async(req,res)=>{
  let {_id} = req.params
  console.log(req.body)
  try {
    await {{MODELNAME}}Model.findByIdAndUpdate(_id,req.body).exec()
    return res.sendStatus(204)
  } catch (error) {
    console.error(`patch ${MODEL_NAME}: ${_id} failed with error: `, error.message)
  }
})

// Delete: delete one resource
{{MODELNAME}}Router.delete('/:_id', async (req, res) => {
  let { _id } = req.params
  try {
    await {{MODELNAME}}Model.findByIdAndRemove(_id).exec()
    return res.sendStatus(204) //204 No Content: The server successfully processed the request and is not returning any content.
  } catch (error) {
    console.error(`delete ${MODEL_NAME}: ${_id} failed with error: `, error.message)
    return res.sendStatus(500)
  }
})

module.exports = {{MODELNAME}}Router